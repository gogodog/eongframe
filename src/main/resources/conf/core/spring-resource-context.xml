<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <context:annotation-config />
    <aop:aspectj-autoproxy />
    <!-- 引入jdbc配置文件 -->
    <context:property-placeholder location="classpath:/conf/custom/env/jdbc.properties" ignore-unresolvable="true" />

    <!-- 创建jdbc数据源 -->
    <beans:bean id="parentDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <beans:property name="initialSize" value="${eongframe.parent.initialSize}"></beans:property>
        <beans:property name="maxActive" value="${eongframe.parent.maxActive}"></beans:property>
        <beans:property name="maxIdle" value="${eongframe.parent.maxIdle}"></beans:property>
        <beans:property name="minIdle" value="${eongframe.parent.minIdle}"></beans:property>
        <beans:property name="logAbandoned" value="${eongframe.parent.logAbandoned}"></beans:property>
        <beans:property name="removeAbandoned" value="${eongframe.parent.removeAbandoned}"></beans:property>
        <beans:property name="removeAbandonedTimeout" value="${eongframe.parent.removeAbandonedTimeout}"></beans:property>
        <beans:property name="maxWait" value="${eongframe.parent.maxWait}"></beans:property>
        <beans:property name="validationQuery" value="${eongframe.parent.validationQuery}"></beans:property>
        <beans:property name="testOnBorrow" value="${eongframe.parent.testOnBorrow}"></beans:property>
        <beans:property name="testWhileIdle" value="${eongframe.parent.testWhileIdle}"></beans:property>
        <beans:property name="timeBetweenEvictionRunsMillis" value="${eongframe.parent.timeBetweenEvictionRunsMillis}"></beans:property>
        <beans:property name="minEvictableIdleTimeMillis" value="${eongframe.parent.minEvictableIdleTimeMillis}"></beans:property>
    </beans:bean>

    <!-- 暂时读写合并 -->
    <beans:bean id="ReadDataSource" parent="parentDataSource">
        <beans:property name="driverClassName" value="${eongframe.parent.driverClassName}"></beans:property>
        <beans:property name="url" value="${eongframe.read.jdbcUrl}"></beans:property>
        <beans:property name="username" value="${eongframe.read.username}"></beans:property>
        <beans:property name="password" value="${eongframe.read.password}"></beans:property>
    </beans:bean>

    <beans:bean id="WriteDataSource" parent="parentDataSource">
        <beans:property name="driverClassName" value="${eongframe.parent.driverClassName}"></beans:property>
        <beans:property name="url" value="${eongframe.write.jdbcUrl}"></beans:property>
        <beans:property name="username" value="${eongframe.write.username}"></beans:property>
        <beans:property name="password" value="${eongframe.write.password}"></beans:property>
    </beans:bean>

    <beans:bean id="DataSource" class="com.elong.mobile.commons.db.ManyDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!-- read -->
                <entry key="read" value-ref="ReadDataSource" />
                <!-- write -->
                <entry key="write" value-ref="WriteDataSource" />
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="ReadDataSource" />
    </beans:bean>

    <!-- mybatis的sql Session Factory -->
    <beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <beans:property name="dataSource" ref="DataSource" />
        <beans:property name="configLocation" value="classpath:conf/core/mybatis-config.xml" />
    </beans:bean>

    <!-- 事务处理 -->
    <beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <beans:property name="dataSource" ref="DataSource" />
    </beans:bean>
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 3.扫描 basePackage下所有的接口，根据对应的mapper.xml为其生成代理类-->
    <!-- 这里的mapper都是接口, 让spring根据xml生成接口的具体实现 -->
    <beans:bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <beans:property name="basePackage" value="com.cott.cwillow.**.mapper" />
    </beans:bean>

    <!-- 配置数据库注解aop -->
    <beans:bean id="manyDataSourceAspect" class="com.cott.frame.datasource.aspect.ManyDataSourceAspect" />
    <aop:config>
        <aop:aspect id="b" ref="manyDataSourceAspect">
            <aop:pointcut id="tx" expression="execution(* com.cott.cwillow.*.mapper.*.*(..))" />
            <aop:before pointcut-ref="tx" method="before"/>
        </aop:aspect>
    </aop:config>
</beans:beans>
